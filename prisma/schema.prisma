// This is your Prisma schema file for PRODUCTION (PostgreSQL),
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  employees     Employee[]
  projects      Project[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id              String           @id @default(cuid())
  employeeId      String           @unique
  name            String
  joiningDate     DateTime
  basicSalary     Float
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskAssignments TaskAssignment[]
  salaryRecords   SalaryRecord[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String           @id @default(cuid())
  title       String
  description String?
  priority    Priority         @default(MEDIUM)
  status      TaskStatus       @default(TODO)
  projectId   String
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignments TaskAssignment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model TaskAssignment {
  id         String   @id @default(cuid())
  taskId     String
  employeeId String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  @@unique([taskId, employeeId])
}

model SalaryRecord {
  id         String   @id @default(cuid())
  employeeId String
  month      Int
  year       Int
  basicSalary Float
  bonus      Float    @default(0)
  deduction  Float    @default(0)
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  @@unique([employeeId, month, year])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}